import { useState } from 'react'
import Container from '@/components/shared/Container'
import Button from '@/components/ui/Button'
import Notification from '@/components/ui/Notification'
import toast from '@/components/ui/toast'
import ProductForm from '../ProductForm'
import ConfirmDialog from '@/components/shared/ConfirmDialog'
import sleep from '@/utils/sleep'
import { TbTrash } from 'react-icons/tb'
import { useNavigate } from 'react-router'
import { apiPostProduct } from '@/services/EventService.js'

const ProductCreate = () => {
    const navigate = useNavigate()

    const [discardConfirmationOpen, setDiscardConfirmationOpen] =
        useState(false)
    const [isSubmiting, setIsSubmiting] = useState(false)

    const handleFormSubmit = async (values) => {
        console.log('Submitting form with values:', values)
        setIsSubmiting(true)
        try {
            // –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã -> –º–∞—Å—Å–∏–≤ URL-—Å—Ç—Ä–æ–∫
            const imageUrls = (values.imgList || [])
                .map(x => x?.img)
                .filter(Boolean)

            // –ï—Å—Ç—å –ª–∏ –ø—É–ª—ã –±–∏–ª–µ—Ç–æ–≤
            const hasPools = Array.isArray(values.ticketPools) && values.ticketPools.length > 0

            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—É–ª–æ–≤ ‚Äî –±–µ—Ä—ë–º —Ñ–∏–∫—Å-–ø—Ä–∞–π—Å
            const amount = !hasPools
                ? (Number.isFinite(Number(values.price)) ? Number(values.price) : null)
                : null

            // –ü–µ—Ä–≤—ã–π —è–∑—ã–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–æ–¥–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é EN
            const language = (values.languages?.[0] || 'en').toUpperCase()

            // –ú–∞–ø–ø–∏–Ω–≥ –ø—É–ª–æ–≤ –≤ DTO (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const ticketPools = hasPools
                ? values.ticketPools.map(p => ({
                    name: p?.name ?? '',
                    price: Number.isFinite(Number(p?.price)) ? Number(p.price) : 0,
                    startDate: p?.startDate ?? null,
                    endDate: p?.endDate ?? null,
                    limitTickets: Boolean(p?.limitTickets),
                    quantity: p?.limitTickets
                        ? (Number.isFinite(Number(p?.quantity)) ? Number(p.quantity) : 0)
                        : null,
                }))
                : undefined

            const dto = {
                name: values.name,
                description: values.description,
                startDate: values.startDate,
                startTime: values.startTime,
                imageUrls, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ, –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
                locationName: values.location,
                country: values.country,
                address: values.address,
                city: values.city,
                postalCode: values.postcode,

                // –ö–æ–¥—ã –∏–∑ —Ñ–æ—Ä–º—ã
                ageRestriction: values.ageRestriction || 'NO_RESTRICTION',
                eventType: (values.eventType || values.eventTypes || 'CONCERT'), // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
                language,
                refundPolicy: values.refundPolicy || 'NO_REFUND',

                // –¶–µ–Ω–∞/—Ç–∏–ø
                priceType: hasPools ? 'TICKET_POOL' : 'FIXED',
                amount,
                currency: 'EUR',

                organizerId: '00000000-0000-0000-0000-000000000000',

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É–ª—ã
                ...(hasPools ? { ticketPools } : {}),
            }

            console.log('DTO –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ API:', dto)

            await apiPostProduct(dto)

            toast.push(
                <Notification type="success">Event created!</Notification>,
                { placement: 'top-center' }
            )
            navigate('/concepts/products/product-list')
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', error)
            toast.push(
                <Notification type="danger">
                    Failed to create event. Please try again.
                </Notification>,
                { placement: 'top-center' }
            )
        } finally {
            setIsSubmiting(false)
        }
    }



    const handleConfirmDiscard = () => {
        setDiscardConfirmationOpen(true)
        toast.push(
            <Notification type="success">Event discardd!</Notification>,
            { placement: 'top-center' },
        )
        navigate('/concepts/products/product-list')
    }

    const handleDiscard = () => {
        setDiscardConfirmationOpen(true)
    }

    const handleCancel = () => {
        setDiscardConfirmationOpen(false)
    }

    return (
        <>
            <ProductForm
                newProduct
                defaultValues={{
                    name: '',
                    description: '',
                    productCode: '',
                    taxRate: 0,
                    price: '',
                    bulkDiscountPrice: '',
                    costPerItem: '',
                    imgList: [],
                    category: '',
                    tags: [],
                    brand: '',
                    startDate: '',
                    startTime: '',
                    location: '',
                    country: '',
                    address: '',
                    city: '',
                    postcode: '',

                    // üîΩ –¥–æ–±–∞–≤—å —ç—Ç–æ
                    ageRestriction: 'NO_RESTRICTION',
                    eventTypes: 'CONCERT',     // (–∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π –ø–æ–ª–µ –≤ eventType)
                    languages: [],             // –º–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤
                    refundPolicy: 'NO_REFUND',
                    ticketPools: [],           // –¥–ª—è useFieldArray
                }}
                onFormSubmit={handleFormSubmit}
                >
                <Container>
                    <div className="flex items-center justify-between px-8">
                        <span></span>
                        <div className="flex items-center">
                            <Button
                                className="ltr:mr-3 rtl:ml-3"
                                type="button"
                                customColorClass={() =>
                                    'border-error ring-1 ring-error text-error hover:border-error hover:ring-error hover:text-error bg-transparent'
                                }
                                icon={<TbTrash />}
                                onClick={handleDiscard}
                            >
                                Discard
                            </Button>
                            <Button
                                variant="solid"
                                type="submit"
                                loading={isSubmiting}
                            >
                                Create
                            </Button>
                        </div>
                    </div>
                </Container>
            </ProductForm>
            <ConfirmDialog
                isOpen={discardConfirmationOpen}
                type="danger"
                title="Discard changes"
                onClose={handleCancel}
                onRequestClose={handleCancel}
                onCancel={handleCancel}
                onConfirm={handleConfirmDiscard}
            >
                <p>
                    Are you sure you want discard this? This action can&apos;t
                    be undo.{' '}
                </p>
            </ConfirmDialog>
        </>
    )
}

export default ProductCreate
